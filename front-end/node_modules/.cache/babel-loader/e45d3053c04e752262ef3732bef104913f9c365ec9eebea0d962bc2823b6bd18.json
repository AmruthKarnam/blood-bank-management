{"ast":null,"code":"var _jsxFileName = \"/Users/amruth/BITS/Semister1/code/DBMS/blood-bank-management/front-end/src/usr/analyst/ListDonorAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport backendApi from '../../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiseaseList = () => {\n  _s();\n  const [donorId, setDonorId] = useState(''); // State to hold the donor ID\n  const [diseases, setDiseases] = useState([]); // State to hold the list of diseases\n\n  // Function to fetch diseases for a specific donor\n  const fetchDiseases = async () => {\n    try {\n      const response = await fetch(backendApi + '/list_donor_diseases', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          donor_id: donorId\n        })\n      });\n      const data = await response.json();\n      setDiseases(data.diseases); // Assuming the response format is { diseases: [] }\n    } catch (error) {\n      console.error('Error fetching diseases:', error);\n    }\n  };\n\n  // Function to handle form submission\n  const handleSubmit = e => {\n    e.preventDefault();\n    fetchDiseases();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"List of Diseases for a Donor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"donorId\",\n        children: \"Enter Donor ID:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"donorId\",\n        value: donorId,\n        onChange: e => setDonorId(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Diseases:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: diseases.map((disease, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: disease\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(DiseaseList, \"O8G94TUD+KPpnJS8t4e++VHPKY0=\");\n_c = DiseaseList;\nexport default DiseaseList;\nvar _c;\n$RefreshReg$(_c, \"DiseaseList\");","map":{"version":3,"names":["React","useState","backendApi","jsxDEV","_jsxDEV","DiseaseList","_s","donorId","setDonorId","diseases","setDiseases","fetchDiseases","response","fetch","method","headers","body","JSON","stringify","donor_id","data","json","error","console","handleSubmit","e","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","value","onChange","target","required","map","disease","index","_c","$RefreshReg$"],"sources":["/Users/amruth/BITS/Semister1/code/DBMS/blood-bank-management/front-end/src/usr/analyst/ListDonorAnalysis.js"],"sourcesContent":["import React, { useState } from 'react';\nimport backendApi from '../../App'\n\nconst DiseaseList = () => {\n  const [donorId, setDonorId] = useState(''); // State to hold the donor ID\n  const [diseases, setDiseases] = useState([]); // State to hold the list of diseases\n\n  // Function to fetch diseases for a specific donor\n  const fetchDiseases = async () => {\n    try {\n      const response = await fetch(backendApi + '/list_donor_diseases', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ donor_id: donorId })\n      });\n\n      const data = await response.json();\n      setDiseases(data.diseases); // Assuming the response format is { diseases: [] }\n    } catch (error) {\n      console.error('Error fetching diseases:', error);\n    }\n  };\n\n  // Function to handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    fetchDiseases();\n  };\n\n  return (\n    <div>\n      <h2>List of Diseases for a Donor</h2>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"donorId\">Enter Donor ID:</label>\n        <input\n          type=\"text\"\n          id=\"donorId\"\n          value={donorId}\n          onChange={(e) => setDonorId(e.target.value)}\n          required\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n\n      <h3>Diseases:</h3>\n      <ul>\n        {diseases.map((disease, index) => (\n          <li key={index}>{disease}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default DiseaseList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}